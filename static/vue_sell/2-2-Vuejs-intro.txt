说到MVVM框架，我们先来看一张图：
View 交互 ViewModel 交互 Model
MVVM框架主要包括三个部分：
Model指的是数据部分，对应到前端就是一些JavaScript对象，View指的是视图部分，对应到前端就是DOM，那ViewModel就是连接视图和数据的中间件。
在MVVM的架构下，视图和数据是不能直接通讯的，它通常会通过ViewModel来进行通讯，ViewModel通常要实现一个Observer观察者，当数据发生变化，ViewModel能够观察到数据的这种变化，然后通知到对应的视图做更新，而当用户操作视图，ViewModel也能监听到视图的变化，然后通知“数据”做改动，这实际上就实现了数据的双向绑定。
在了解了MVVM的基本概念，我们来看一下MVVM的应用场景：
它是针对具有复杂交互逻辑的前端应用；
它提供基础的架构抽象；
它可以通过Ajax数据持久化，保证前端用户体验；
它有什么好处？好处就是当前端进行和数据做操作的时候，可以通过Ajax请求，对后端做数据持久化，不需要刷新整个页面，只需要改动DOM里那一部分需要改动的数据的内容，特别是移动端应用场景，刷新页面的代价太昂贵，会重新加载很多资源，虽然有些资源会被缓存，但是页面的DOM、JS、CSS都会被浏览器重新解析一遍，因此，移动端页面通常会做成SPA单页面应用，在这个基础上就诞生了很多MVVM框架：Angular.js、react.js、vue.js，接下来，让我们来看看vue.js是什么。