那这里，我们发现项目中，多了一个data.json文件，我们打开看一下，这个是我为大家准备的一份数据文件。是我自己模拟的。
因为它的内容很多，我们就不带大家一个个敲了。那这个接口，它数据的设计呢，主要是依赖页面内容。
我们接下来就会对照这个设计稿去介绍这里面的内容。
我们可以看到数据主要包括三个方面：seller、goods、ratings
第一这个seller是商家相关的数据，goods是商品相关的数据，ratings是一些评论相关的数据。那先来看一下商家相关的数据：
我们可以通过这几个页面看到：比如说这个商品页，它包括：商家的名称、它的配送、配送时间、还有它支持的一些减价、公告。
这个详情浮层里，也有，比如星级、优惠信息、商家公告。
还有一些，像商家页、这里面也会有一些：比如销售情况、然后起送价、配送价、配送时间、等等，包括它的一些商家实景图片，
商家信息等等...
然后，我们对应到数据里面，可以看到，它就是这些字段，有name、description等等这些字段，还有一些图片。
它支持的一些优惠信息，然后优惠信息有不同内容，减价的或打折的，或这些套餐类，发票类，
等等这些数据，都是商家相关的一些数据，我们都用seller这个字段去表示。
然后goods这个字段，我么也可以结合设计稿去看一下，
比如说我们在这个商品页，去买一个商品，这些商品都包括一些：名称、然后一些特殊的描述，销售的份数，好评率、价格，
等等。然后商品它有一些详情页，包括商品的图片、然后它的一些介绍，评价等等	。
对应到我们data里的数据，就是有一个goods，其实，因为我们有很多商品，从最外层它是一个数组。
每个数组元素都是一个具体的商品，好，这里还有一个商品的分类，我们可以看到这个页面：
每个商品它都属于一个特殊的分类，比如说这个皮蛋瘦肉粥的套餐，它属于“单人特色套餐”类，
那粥就属于“特色粥品”类，所以我们的商品都会有一个分类，它的type表示的是：下面有没有一个特殊的标志，
比如说，它是一个特价、或一些特殊的icon去标识它。属于什么类型。那goods下的foods就是在一个分类下，
然后它有一些所有的商品，每一个都是一个food，这也是一个数组，那我们看到具体某一个商品，比如说这个：
“皮蛋瘦肉粥”，对应它有这个商品的名称、价格、之前的价格、描述、销售情况等等，然后它还有一些商品的小图标和大图。
都是我从外卖网站上去抓的数据，然后ratings这个是商品的一个评论，我们可以看到，
商品的详情下面，它都有单个商品的一些评论，那对应到我们这里的数据，可以看到这个data.json，
每个评论都有一个用户名、发表的时间、他是点赞还是踩、有rateType，还有text就是文本，还有用户的头像。
看完这个goods字段，再看最后一个：ratings，就是商家的一些评论。它其实也是数组，我们看到有多条评论，
可以看到设计页中的评价页，这些如“服务态度”、“送达时间”等也是商家相关的信息。
那这个评论，就是评论所需要的一些数据，比如说一个评论，就包括：
用户的头像、评分、用户名、描述、推荐菜、等等。可以看到对应data里的数据：都会有。
那我们把这些数据模拟好，那这些数据就相当于我们模拟的数据源，对应到真实的生产环境可能就是一个数据库。
它存放了商家相关的一些数据信息。那我们模拟的数据请求呢，其实就是从这个语言里面去读取一些数据。
那接下来，我们就来编写这些接口，那首先，我们打开这个build目录，然后这个目录下有一个dev-server.js
这是我们开发webpack打包的一个入口文件，我们打开了这个文件以后，
我们是用var app = express()框架去启动的一个node server，
那我们也可以用express的router去编写接口请求，首先，我们要从data.json里去读取数据，
我们可以在这里先定义数据的读取，比如在这里，我们开一段代码：
比如，我们定义一个var appData = require('../data.json');我们拿到这个data，
接下来我们再定义一些变量，比如说：
商家数据var seller = appData.seller;我们把seller数据塞到这个变量里，
然后定义var goods = appData.goods;
再定义var ratings = appData.ratings;
那我们就拿到这些数据了，接下来，我们就要编写一些路由，我们首先定义一个路由api：
var apiRoutes = express.Router();拿到这个routes，
那我们先写一些接口：对应的这个请求，然后，我们就要取这个数据：有一个回调函数，两个参数：request和response，
那我们服务端收到这个请求以后，它需要？给客户端一个json类型的数据，我们开发规范，在返回一个接口的时候，
有一个字段叫errorNumber，errno:0是我们规范、为0，当我们这个数据是正常的时候，我们通过errno: 0这个字段，
来表示这个？是正常的。由于我们这里是一个模拟的数据，所以我们，只有errno为0的情况，
那真实的情况，比如说对一些数据，有权限的限制，那这个errno可能是不为零的，那具体这个errno的数值，
是根据业务方自己的业务去定的一些错误码，除了errno我们还有一个字段叫seller,对应的这个seller就是seller这个数据，
也就是说，它返回这个json，它有一个errno是错误码，seller就表示它具体的数据，
apiRoutes.get('/seller', function(req,res){
  res.json({
    errno: 0,
    seller: seller  
  });
});
那，对应的，我们再写一下其它的接口：
apiRoutes.get('/goods',function (req,res) {
  res.json({
    errno: 0,
    goods: goods
  });
});
其实这里，我觉得，不要用具体的这个重复的key，用data会更好一点：
apiRoutes.get('/seller', function(req,res){
  res.json({
    errno: 0,
    data: seller  
  });
});
apiRoutes.get('/goods',function (req,res) {
  res.json({
    errno: 0,
    data: goods
  });
});
这样，我们每个数据结构都定义比较清晰，一个errno，一个data。
然后是：
apiRoutes.get('/ratings',function (req,res) {
  res.json({
    errno: 0,
    data: ratings
  });
});
好了，我们定义了这些以后，要在express去使用它，express对应的就是app对象，利用app.use()方法，
通常有两个参数，第一个参数是path，但我们所有的接口相关的api都会通过api这个路由，然后路由到具体的路由，
app.use('/api', apiRoutes);
这样，我们通过'/api'再/goods就可以具体请求到这个数据了，好，我们来演示一下，
回到控制台，我们去启动一下这个项目，npm run dev
稍微等一会，可以看到，这里有个报错，在App.vue下面，Module not found，是因为我们在上一节把assets目录给删了，
它就找不到这个图片，我们可以看到我们的代码，代码里，src/App.vue请求了<img class="logo" src="./assets/logo.png">
我们把这段注释掉，不需要这个logo，可以看到，一注释就可以自动编译了，其实就是一个hot-module-reload，
给我们带来的便利，它自动编译通过了，那这样我们刷新一下页面，可以看到已经没有vue的logo了。
但这个项目是一样可以起来的。
然后，我们接着就来测试刚才写的api，localhost:8080/api/seller，
可以看到，它实际上是返回了我么定义seller的数据，这里看到我们的json对象是格式化的，
实际上利用了google的插件jsonview，如果同学们访问这个地址的时候，不是这样格式化好的数据，
我么可以通过去安装这个插件，让这个数据好看一些，好，那我们再测另外两个接口，这时，我们数据的mock就完成了。
我们来回顾一下本章的内容，我们这一章一开始，是从需求分析开始，然后到图片，资源准备，然后到图标字体的制作，
到目录结构设计，到目录mock数据，这些都是为我们项目做一些准备工作，那接下来，我们就可以真的去编写这个页面。
