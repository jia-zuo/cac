在项目编写之前，我们要做的是对项目的目录结构设置。
我们所有代码，都会放在这个src目录之下，我们会有一个main.js的入口文件。
这个App.vue文件是整个页面的vue实例文件。
也就是把整个页面看成是vue的大组件，src目录下，我们通常会有两个子目录，其中有一个是components目录，
这个目录是存放我们的组件文件，但我们不会像脚手架自动生成代码这样，把Hello.vue文件直接放在这个目录下。
我们会多建一个子目录，比如说我们去创建一个Header组件，那我们会这样操作：
我们在components上点击右键，New一个目录，然后起名叫header，然后我们在header底下，New一个vue文件。
名为header.vue，我们会这样设计这个目录结构，它这么做的原因是因为一个vue组件除了它的.vue文件，之外，
还可能包含一些图片，相关资源等等。
我们在前一章说过，组件的一个很重要的设计原则就是：
就近维护，我们把一个组件相关的资源都放在一个目录底下，然后，对外是隔离的，这样非常有利于对代码的维护。
那除了这个components目录之外，我们通常还会有一个叫common的目录，我们在src下面创建一个目录：我们起名叫common。
那这个目录，主要就包含一些公共的模块和资源，我们会在common目录下，新建三个子目录：
js、stylus、fonts
这个stylus，它是一个css预处理器，它其实和lairs、saars的功能都差不多，语法上有差别。
我们会在接下来的课程，穿插解释一些stylus的用法，如果有些同学说，我就想用saars和lairs，那当然也是可以的。
那就需要把课程中的一些stylus代码替换成lairs和saars的语法。
那上节课我们定义了一个图标字体文件，那可以把相关的文件拷贝过来，我们要把这个fonts目录下面的四个文件拷贝过去，
好，我们在这里复制一下，然后去找到我们的代码目录，src/common/fonts下面把相关的字体文件都拷贝过来，
然后，除了这个字体文件，我们还有一个文件是style.css，这就是图标字体的一些类的定义，
我们同样要把它拷贝到我们的代码目录里面：找到src/common/stylus目录，因为它是一个css文件，拷贝过来，
好，我们回到工程目录下，可以看到：fonts目录下多了这几个字体文件，stylus下面会多了一个style.css，
待会儿我们要给它改一个有意义的名字，我们把它改名为icon.styl，这个后缀就是stylus文件的后缀。
当然，因为是一个stylus文件的话，我们还是希望它是用stylus语法。
那接下来就把这个stylus文件改成stylus语法：
其实很简单，就是把大括号去了，然后把这些分号都删掉。因为stylus是不需要分号的。
其实stylus这个冒号也是可以省略的，但是为了我们的阅读比较好阅读，我们还是保留这个冒号。
然后把后面的分号、大括号也删掉。
可以看到，每个字体icon都是一些content一个特殊的字符串。这样能表示不同的字体。
删掉以后，我们给这个文件格式化一下，好，这样我们的icon.styl就相当于改好了。
最后，我们把src/assets目录删掉，因为我们不需要它。
那其实我们的整个代码结构呢，就是这么构成，有两个子目录：common、components，App.vue和main.js两个文件。
子目录，一个是common目录，包含一些公共资源，components目录就是包含一些组件相关资源。
我们之后会在这个component目录下补充建这个项目所需要的所有组件代码。
然后，会把这个common目录下，这个依赖的所有公共资源都会在这几个子目录里添加。
好，那我们目录结构的设计就到这里。
我们知道现在流行的开发方式是一个前后端分离的方式，也就是前后端各司其职，各自开发，那最后再放到一起联调。
那在一个spa的单页应用当中，前端和后端的交互方式，主要是通过发送ajax请求，获取数据，那么前后端分离，前端有一个很重要的环节就是数字的mock，
就是模拟一些假的数据，当然我们这个项目也有很多模拟的假数据，接下来，我们就看准备工作中的最后一个环节，就是如何去mock数据。