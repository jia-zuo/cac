说到webpack，它是当前最火的一个前端构建工具。
相信很多同学听过或者用过。
我们可以去它的官网看一下：webpack.github.io；
这张图可以看到webpack功能：它就是把各种各样的前端资源编译打包，最终输出js、图片或css；
有些同学会谈webpack色变，那是因为webpack的配置实在太复杂了，甚至出来了webpack配置工程师；
我们这一小结，就是对webpack的配置做一个深度剖析，希望想了解webpack的同学一定要认真学习。

我们回到这个页面，我们可以看到，这个运行的页面只有一个html文档和一个app.js，
去看一下源码，我们源码里并没有编写：app.js，那么html文档呢，也没有引用任何资源，
产生这一切的原因，那就是因为webpack的编译，我们这一节，
只对开发时的webpack配置做一些分析，
运行时的webpack配置，放在编译打包那一节讲

下面，我们从入口，也就是package.json里面描述的从dev这个入口来分析webpack是如何做编译的，
可以看到npm run dev其实就是执行的这个
webpack-dev-server --inline --progress --config build/webpack.dev.conf.js
这个命令
它是运行的这个build目录下的一个webpack.dev.conf.js这样一个文件，我们来看一下这个文件：
首先它有各种依赖，这个path就是node.js启用的一个api，他是表示提供的一些文件路径的操作方法，
express是一个node.js框架，我们这里，用它去启动一个webserver，
webpack呢，就是核心编译工具，可能很多同学学习webpack都是全局安装的方式，然后通过执行全局命令webpack去做编译，
实际上，webpack也提供了一个node.js的api，可以在node.js里引用webpack进行编译，
那config里的js，这是一个配置文件，它就是对运行时和开发时的一些配置，我们稍后会看到，

好，回到这个webpack.dev.conf.js，
那这个proxyMiddleware是一个app什么代理的中间件，它可以代理和转发一些api，
WebpackConfig就是webpack的一些相关配置，那这里我们是一个开发时的配置，也依赖./webpack.base.conf，
我们来看一下这个配置文件里面是怎么写的，打开webpack.dev.conf：
这文件开头也是声明的一些依赖，除了config和webpack依赖，它还依赖了webpack-merge，用于合并配置文件，
这个utils是一些工具方法，我们稍后具体用到的时候再去看，
这个baseWebpackConfig也是这个webpack的配置文件，它是被开发时和运行时的webpack文件所共享的，
HtmlWebpackPlugin就是webpack提供的操作html文件的插件，

我们现在来看一下./webpack.base.conf：
这个文件开头的依赖都是我们今天提到过的，我们就不一一介绍，
projectRoot可以定义当前项目的根目录，
var projectRoot = path.resolve(__dirname, '../')
'../'回到build上一级，
module.exports就是webpack里的一些基本配置，相信这种结构对大家来说是一种不陌生的结构，
那这个entry它是一个入口的配置，key为app，值为'./src/main.js'，对象的一个配置，
它表示webpack编译的入口js文件，是指向这个src目录下的main.js，
output它是一个输出的配置，这个path表示输出的文件路径，
这个对应config/index.js其中的[config.]build.assetsRoot，
在某目录下会创建一个dist目录作为输出目录，

好，回到./webpack.base.conf：
那这个publicPath，表示请求的静态资源绝对路径，
config.build.assetsPublicPath也就是config目录下index.js中build.assetsPublicPath，
也就是根目录的路径，





